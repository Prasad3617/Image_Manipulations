# -*- coding: utf-8 -*-
"""IMAGE_MANIPULATIONS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16_UKtNFuBupXzCZq0KnxsorYHe7qIhJX

*Importing the required files...*
"""

import cv2
import numpy as np

"""*Defining a function for creating a salt&pepper Noise*

"""

def sp_noise(image):
  output=image.copy()          #creating a copy of the image upon which to impose the salt&pepper noise
 
  if len(image.shape)==2:      #declaration for the grayscale image: only one dimensional array with '0' for 'black' and '255' for 'white'
    black=0
    white=255
 
  else:
    black=np.array([0,0,0], dtype='uint8')              #declaring for RGB image: 3D array for colored image One for Red, One for Green and One for Blue
    white=np.array([255,255,255], dtype='uint8')

random_threshold=np.random.random(image.shape[:2])
output[random_threshold<(random_threshold/2)]=black      
output[random_threshold>1-(random_threshold/2)]=white
return output

"""*driver function for declaring an image and performing Image-Manipulations 
note that any image can be used instead of 'car.jpeg'*
"""

image=cv2.imread('car.jpeg')                             
sp_noisy_image=sp_noise(image)                           
cv2.imshow("salt and pepper noise"; np.hstack((image,sp_noisy_image)))
cv2.waitkey(0)

"""*mean filter for image manipulations*"""

def mean_filter(image,filter_size):                  
  filter_dims=(filter_size,filter_size)
  mean_filter=np.ones(filter_dims,np.float32)/filter_size*filter_size
  filtered_image=cv2.filter2D(image,-1,mean_filter)
  return filtered_image

"""*code for performing mean_filter_Image-Manipulations*"""

image=cv2.imread('car.jpeg')
sp_noisy_image=sp_noise(image)
mean_filtered_image=mean_filter(sp_noisy_image,3)
cv.imshow('mean_filtered_image',np.hstack((sp_noisy_image,filtered_image)))
cv2.waitkey(0)

"""*median filter for image manipulations*"""

def median_filter(image,filter_size):                   
  filtered_image=cv2.medianBlur(image,filter_size)
  return filtered_imagee

"""*code for performing median_filter_Image-Manipulations*"""

image=cv2.imread('car.jpeg')
sp_noisy_image=sp_noise(image)
median_filtered_image=median_filter(sp_noisy_image,3)
cv2.imshow('Median_filtered_image', np.hstack((sp_noisy_image,filtered_image)))
cv2.waitkey(0)